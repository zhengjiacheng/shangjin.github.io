<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[夷陵智慧园区]]></title>
    <url>%2F2018%2F11%2F15%2F%E5%A4%B7%E9%99%B5%E6%99%BA%E6%85%A7%E5%9B%AD%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[前言夷陵智慧园是为宜昌市夷陵区五商一城开发的一套智慧园区系统，为方便园区综合管理商户、线上为商户进行各类服务，整套系统由三个B/S架构的系统组成。 模块功能1.微信用户端（商家及个体用户）：包含（个人中心、我的费用、我的积分、我的会议室、我的报修、我的增值服务、我的投诉建议、话题圈子、首页分类新闻等模块）； 2.微信服务端（园区管理人员）：包含（个人中心、合同管理、会议室审批、费用查询、增值服务处理、设备巡检、物业报修、投诉建议模块）； 3.后台管理端（园区管理人员）：包含：（企业服务、信息发布、社交论坛、大屏看板、物业管理、广告配置、系统设置几大模块）； 主要技术：系统使用Nginx反向代理进行前后端分离式的开发；后端： 采用SpringBoot框架、MyBatis做持久层框架、使用slf4j+logback框架进行日志记录、使用Maven做项目版本控制、数据储存使用Mysql、用SVN做源代码版本控制；管理端： 使用Layui框架；微信端： 使用mui前端框架；开发工具： Idea、Webstrom、Nginx； 责任描述主要负责：1、后台管理端：商户入驻审批，会议室管理、合同管理、增值服务 (后端Java逻辑代码的编写，前端页面的设计，前后端数据的交互)； 2、微信用户端：会议室申请、增值服务申请、我的合同 (后端Java逻辑代码的编写，前后端数据的交互)； 3、微信服务端：会议室审批、增值服务处理、合同查询(后端Java逻辑代码的编写，前后端数据的交互)；]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目经验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS使用Docker安装Mysql5.7]]></title>
    <url>%2F2018%2F10%2F16%2FCentOS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Mysql5-7%2F</url>
    <content type="text"><![CDATA[前言CentOS使用Docker安装Mysql5.7并挂载外部配置和数据 普通安装:Docker下载MySQL镜像docker pull mysql:5.7 运行该命令后，则会显示以下日志：123456789101112131415[root@localhost ~]# docker pull mysql:5.75.7: Pulling from library/mysqlad74af05f5a2: Pull complete 0639788facc8: Pull complete de70fa77eb2b: Pull complete 724179e94999: Pull complete 50c77fb16ba6: Pull complete d51f459239fb: Pull complete 937bbdd4305a: Pull complete 35369f9634e1: Pull complete f6016aab25f1: Pull complete 5f1901e920da: Pull complete fdf808213c5b: Pull complete Digest: sha256:96edf37370df96d2a4ee1715cc5c7820a0ec6286551a927981ed50f0273d9b43Status: Downloaded newer image for mysql:5.7 查看本机镜像docker images 运行后：123456[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmysql 5.7 c73c7527c03a 8 days ago 412MBhello-world latest 1815c82652c0 7 weeks ago 1.84kBjava latest d23bdf5b1b1b 6 months ago 643MBlearn/tutorial latest a7876479f1aa 4 years ago 128MB 创建并启动参数说明：-e MYSQL_USER=”shangjin” ：添加shangjin用户 -e MYSQL_PASSWORD=”123456”：设置添加的用户密码 -e MYSQL_ROOT_PASSWORD=”123456”：设置root用户密码 –character-set-server=utf8：设置字符集为utf8 –collation-server=utf8_general_cli：设置字符比较规则为utf8_general_cli1docker run -d -p 3306:3306 -e MYSQL_USER=&quot;shangjin&quot; -e MYSQL_PASSWORD=&quot;123456&quot; -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; --name mysqltest1 mysql:5.7 --character-set-server=utf8 --collation-server=utf8_general_ci 挂载外部配置和数据安装123456789101112131415161718192021222324// 创建docker目录 mkdir /docker// 创建mysql目录mkdir /docker/mysql// 创建conf目录mkdir /docker/mysql/conf// 创建data目录mkdir /docker/mysql/data // 创建my.cnf配置文件touch /docker/mysql/conf/my.cnf // my.cnf添加如下内容：[mysqld]user=mysqlcharacter-set-server=utf8default_authentication_plugin=mysql_native_password[client]default-character-set=utf8[mysql]default-character-set=utf8// 配置不区分大小写lower_case_table_names=1 创建容器，并后台启动 参数说明： –privileged=true：容器内的root拥有真正root权限，否则容器内root只是外部普通用户权限 -v /docker/mysql/conf/my.cnf:/etc/my.cnf：映射配置文件 -v /docker/mysql/data:/var/lib/mysql：映射数据目录 docker run -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysqltest2 mysql:5.7 查看已经运行的的所有容器docker ps 1234[root@localhost ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9238d9feb10a mysql:5.7 &quot;docker-entrypoint...&quot; 12 seconds ago Up 9 seconds 0.0.0.0:3306-&gt;3306/tcp mysql5.7[root@localhost ~]# OK现在已经成功启动了。可以使用mysql的工具进行连接。 END 参考：https://blog.csdn.net/woniu211111/article/details/80968154]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Ubuntu</category>
        <category>Docker</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Ubuntu</tag>
        <tag>Docker</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7安装Docker]]></title>
    <url>%2F2018%2F10%2F16%2FCentOS%207%E5%AE%89%E8%A3%85Docker%2F</url>
    <content type="text"><![CDATA[前言Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。 Docker 求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证CentOS 版本是否支持 Docker 。通过 uname -r 命令查看你当前的内核版本uname -r 使用 root 权限登录 Centos。确保 yum 包更新到最新。sudo yum update 卸载旧版本(如果安装过旧版本的话)sudo yum remove docker docker-common docker-selinux docker-engine 卸载旧版本的包sudo yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64 安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的sudo yum install -y yum-utils device-mapper-persistent-data lvm2 设置yum源sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 查看所有仓库中所有docker版本，并选择特定版本安装yum list docker-ce --showduplicates | sort -r 安装docker12345// 由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0sudo yum install docker-ce // 例如：sudo yum install docker-ce-17.12.0.cesudo yum install &lt;FQPN&gt; 启动并加入开机启动12sudo systemctl start dockersudo systemctl enable docker 验证安装是否成功(有client和service两部分表示docker安装启动都成功了)docker version END]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Docker</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git修改全局初始化的用户名和邮箱(修改user.name 和user.email)]]></title>
    <url>%2F2018%2F10%2F16%2FGit%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1-%E4%BF%AE%E6%94%B9user-name-%E5%92%8Cuser-email%2F</url>
    <content type="text"><![CDATA[前言Git修改全局初始化的用户名和邮箱(修改user.name 和user.email) 修改用于提交的 用户名和邮箱输入:git config --list可以查看配置的一些东西。可以看到user.name 和user.email 分别是什么如果你没有初始化过。那么直接：git config --global user.name &quot;输入你的用户名&quot;git config --global user.email &quot;输入你的邮箱&quot; 如果初始化过了，可以通过以下操作修改git config --global --replace-all user.email &quot;输入你的邮箱&quot;git config --global --replace-all user.name &quot;输入你的用户名&quot; 然后再查看下git config --list 参考：https://blog.csdn.net/sky_miange/article/details/60881282 END]]></content>
      <categories>
        <category>Linux</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安阳鹊桥网]]></title>
    <url>%2F2018%2F09%2F09%2F%E5%AE%89%E9%98%B3%E9%B9%8A%E6%A1%A5%E7%BD%91%2F</url>
    <content type="text"><![CDATA[前言安阳鹊桥网是为安阳市总工会开发的一套供工会内部使用的婚恋交友平台，整套系统由两个B/S架构的系统组成。 模块功能1.微信端由婚恋用户使用（以安阳工会公众号为入口，非工会会员无法登陆）；2.后台管理由工作人员使用；微信端模块功能：(1).我的（管理个人资料、对我的喜欢、喜欢我的、相互喜欢、我的故事、我的活动、我的推荐进行归纳展示）;(3).活动（展示所有活动、并具有参加和查看功能）；(4).首页（对会员进行筛选和喜欢与不喜欢的操作）；后台管理端模块功能：(1).会员管理（具有对会员增、删、改、查功能）；(2).活动管理（具有发布、修改、删除、统计报名功能）；(4).举报管理（核实并对相关用户做处理）；(6).故事统计（统计全网用户发布）； 主要技术：系统使用Nginx反向代理进行前后端分离式的开发；后端： 采用SpringBoot框架、MyBatis做持久层框架、使用slf4j+logback框架进行日志记录、使用Maven做项目版本控制、数据储存使用Mysql、用SVN做源代码版本控制；管理端： 采用BootStrap框架，动态生成表格；微信端： 使用vue.js框架；开发工具： Idea、Webstrom、Nginx； 责任描述:主要负责：1.微信端：活动、故事模块JAVA后台API编写； 2.管理端：活动管理、活动审核、故事统计模块功能的实现（包含Java后端API及前端页面和前后端数据的交互； 其他功能概览：微信端： web宣传 管理端]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目经验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科研管理平台]]></title>
    <url>%2F2018%2F09%2F09%2F%E7%A7%91%E7%A0%94%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[前言科研管理平台最初开发的目的主要是为了方便学校领导审批、管理科研项目和学校教职工提交科研项目。 模块功能：统计、项目管理、成果管理、经费管理、机构管理、科研活动、科研新闻及系统模块和部门、人员管理，不同登录用户做权限控制。 主要技术：系统使用Nginx反向代理进行前后端分离式的开发；前端： 采用BootStrap框架，动态生成表格；后端： 采用SpringBoot框架、MyBatis做持久层框架、使用slf4j+logback框架进行日志记录、使用Maven做项目版本控制、数据储存使用Mysql、用SVN做源代码版本控制；开发工具： MyEclipse、Webstrom、Nginx； 责任描述:主要负责：1.用户个人信息修改、管理； 2.项目管理（主页、修改、详情、审核）模块，Java后端业务逻辑代码和前端页面的设计以及前后端数据的交互； 其他功能概览：统计模块 部门权限管理 新建科研项目]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目经验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用操作命令]]></title>
    <url>%2F2018%2F02%2F05%2FGit%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[前言本文记载了一些Git常用的命令,更多命令请移步官方网站。 本地初始化一个项目首先，你需要执行下面两条命令，作为 git 的基础配置，作用是告诉 git 你是谁，你输入的信息将出现在你创建的提交中。12git config --global user.name &quot;你的名字或昵称&quot;git config --global user.email &quot;你的邮箱&quot; 然后在你的需要初始化版本库的文件夹中执行：1234git init // 注:项目地址形式为:https://gitee.com/xxx/xxx.git或者 git@gitee.com:xxx/xxx.gitgit remote add origin &lt;你的项目地址&gt; 这样就完成了一次版本你的初始化。 如果你想克隆一个项目，只需要切换到指定文件夹执行：git clone &lt;项目地址&gt; 完成第一次提交进入你已经初始化好的或者克隆项目的目录,然后执行：1234567891011// 注意：养成每次提交前更新一次内容 git pull origin dev// 这里需要修改/添加文件，否则与原文件相比就没有变动git add .// 注意：养成每次提交备注信息的习惯git commit -m &quot;第一次提交&quot;// 从本地仓库提交到远程仓库git push origin dev 然后如果需要账号密码的话就输入账号密码，这样就完成了一次提交。 END 参考：http://git.mydoc.io/?t=180676#text_180676Git大全：https://gitee.com/all-about-git]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Ubuntu</category>
        <category>Git</category>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Ubuntu</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SVN常用操作命令]]></title>
    <url>%2F2018%2F02%2F01%2FSVN%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[前言SVN作为日常开发中不可缺少的工具，Ubuntu下的SVN安装十分简单，sudo apt-get install subversion，然后根据提示一步一步，就完成了SVN的安装，本文记载了一些svn常用的命令,更多命令请移步官方网站。 将文件checkout到本地目录命令：checkout或co 示例： 1、svn co http://路径(目录或文件的全路径) [本地目录全路径] –username 用户名–password 密码 2、svn co svn://路径(目录或文件的全路径) [本地目录全路径] –username 用户名–password 密码 3、svn checkout http://路径(目录或文件的全路径) [本地目录全路径] –username 用户名 4、svn checkout svn://路径(目录或文件的全路径) [本地目录全路径] –username 用户名 注意事项： 1、如果不带–password参数传输密码的话，会提示输入密码，建议不要用明文的–password选项。推荐使用示例c、d，其执行之后会提示输入密码 2、其中username 与password前是两个短线，不是一个。 3、若不指定本地目录全路径，则检出到当前目录下。 例子： svn cosvn://192.168.0.6/test /home/test --username xxx svn cohttp://192.168.0.6/test/testapp --username xxx svn checkoutsvn://192.168.0.6/ test /home/ test --username xxx svn checkouthttp://192.168.0.3/test/testapp --username xxx 添加新文件命令：svn add svn add 文件名 注：告诉SVN服务器要添加文件了，还要用svncommint -m真实的上传上去！ 例子： I、svnadd test.c ＜－添加test.c svn commint -m “添加测试用test.c“test.php II、svnadd *.c ＜－添加当前目录下所有的c文件 svn commint -m“添加测试用全部c文件“*.c 导出(导出一个干净的不带.svn文件夹的目录)命令：svn export svn export [-r 版本号] http://路径(目录或文件的全路径)[本地目录全路径] –username 用户名 svn export [-r 版本号] svn://路径(目录或文件的全路径)[本地目录全路径] –username 用户名 svn export 本地检出的(即带有.svn文件夹的)目录全路径 要导出的本地目录全路径 注：第一种从版本库导出干净工作目录树的形式是指定URL， 如果指定了修订版本号，会导出相应的版本， 如果没有指定修订版本，则会导出最新的，导出到指定位置。 如果省略本地目录全路径，URL的最后一部分会作为本地目录的名字。 第二种形式是指定本地检出的目录全路径到要导出的本地目录全路径，所有的本地修改将会保留，但是不在版本控制下(即没提交的新文件，因为.svn文件夹里没有与之相关的信息记录)的文件不会拷贝。 例子： svn exportsvn://192.168.0.3/ test /home/ test --username xxx svn exporthttp://192.168.0.3/test/testapp --username xxx svn export /home/ test/home/ testbak 将改动的文件提交到版本库命令：svn commint或svn ci svn commint -m “提交备注信息文本“ [-N] [–no-unlock] 文件名 svn ci -m “提交备注信息文本“ [-N] [–no-unlock] 文件名 svn commit -m”LogMessage” [-N] [–no-unlock]PATH(如果选择了保持锁,就使用–no-unlock开关) 必须带上-m参数，参数可以为空，但是必须写上-m 例子： svn commint -m“提交当前目录下的全部在版本控制下的文件“ ＜－注意这个表示全部文件 svn commint -m“提交测试用test.c“test.c svn commint -m“提交测试用test.c“-N –no-unlock test.c ＜－保持锁就用–no-unlock开关 svn ci -m“提交当前目录下的全部在版本控制下的文件“ ＜－注意这个表示全部文件 svn ci -m “提交测试用test.c“test.c svn ci -m “提交测试用test.c“-N –no-unlock test.c ＜－保持锁就用–no-unlock开关 更新文件命令：svn pdate或svn up svn update -r 修正版本 文件名 svn update 文件名 例子： svn update ＜－后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本 svn update -r 1300test.c ＜－将版本库中的文件test.c 还原到修正版本（revision）1300 svn update test.c ＜－更新与版本库同步。 提交的时候提示过期冲突，需要先update 修改文件， 然后清除svnresolved，最后再提交commit。 删除文件命令：svn elete或svn del, svnremove, svnrm svn delete svn://路径(目录或文件的全路径)-m “删除备注信息文本” 推荐如下操作： svn delete 文件名 svn ci -m “删除备注信息文本” 例子： svn deletesvn://192.168.1.1/ trunk /main /test.c -m “删除测试文件test.c” 推荐如下操作： svn delete test.c svn ci -m“删除测试文件test.c” svn delete path -m&quot;delete test fle&quot; 例如：svndelete svn://192.168.1.1/ trunk /main/test.c -m &quot;delete testfile&quot; 或者直接svndelete test.c 然后再svnci -m ‘delete test file‘,推荐使用这种 加锁/解锁命令：svn lock svn lock -m “加锁备注信息文本“ [–force] 文件名 svn unlock 文件名 svn lock -m”LockMessage” [–force] PATH 例如：svnlock -m “lock test file” test.c svn unlock PATH 例子： svn lock -m“锁信测试用test.c文件“test.c svn unlock test.php 比较差异命令：svn diff svn diff 文件名 svn diff -r 修正版本号m:修正版本号n 文件名 例子： svn diff test.php＜－将修改的文件与基础版本比较 svn diff -r 200:201test.php＜－对 修正版本号200和修正版本号201 比较差异 svn diffpath(将修改的文件与基础版本比较) 例如： svndiff test.php svn diff -r m:npath(对版本m和版本n比较差异) 例如： svndiff -r 200:201 test.php 简写：svndi 将两个版本之间的差异合并到当前文件命令：svnmerge svn merge -r m:n path 例如：svnmerge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件,但是一般都会产生冲突,需要处理一下） 查看文件或者目录状态命令：svnstatus 或 svnst svn st 目录路径/名 svn status 目录路径/名＜－目录下的文件和子目录的状态，正常状态不显示 【?：不在svn的控制中； M：内容被修改；C：发生冲突； A：预定加入到版本库；K：被锁定】 svn -v 目录路径/名 svn status -v 目录路径/名＜－显示文件和子目录状态 【第一列保持相同，第二列显示工作版本号， 第三和第四列显示最后一次修改的版本号和修改人】 注：svnstatus、svndiff和svn revert这三条命令在没有网络的情况下也可以执行的， 原因是svn在本地的.svn中保留了本地版本的原始拷贝。 1）svnstatus path（目录下的文件和子目录的状态,正常状态不显示） 【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】 2）svnstatus -v path(显示文件和子目录状态) 第一列保持相同,第二列显示工作版本号,第三和第四列显示最后一次修改的版本号和修改人. 注：svnstatus、svndiff和svnrevert这三条命令在没有网络的情况下也可以执行的,原因是svn在本地的.svn中保留了本地版本的原始拷贝. 简写：svnst 查看日志命令：svn log svn log 文件名 svn log path 例子： svn log test.php＜－显示这个文件的所有修改记录，及其版本号的变化 查看文件详细信息命令：svn info svn info 文件名 svn info path 例子： svn info test.php SVN帮助命令：svn help svn help＜－全部功能选项 svn help ci＜－具体功能的说明 查看版本库下的文件和目录列表命令：svn list或svn ls svn list svn://路径(目录或文件的全路径) svn ls svn://路径(目录或文件的全路径) 例子： svn listsvn://192.168.0.3/test svn lssvn://192.168.0.3/test ＜－显示svn://192.168.0.3/test目录下的所有属于版本库的文件和目录 创建纳入版本控制下的新目录命令：svn mkdir svn mkdir 目录名 svn mkdir -m “新增目录备注文本” http://目录全路径 创建版本控制的目录. 1、每一个以工作副本PATH 指定的目录,都会创建在本地端,并且加入新增 调度,以待下一次的提交. 2、每个以URL指定的目录,都会透过立即提交于仓库中创建. 在这两个情况下,所有的中间目录都必须事先存在. 例子： svn mkdir newdir svn mkdir -m &quot;Makinga new dir.&quot; http://192.168.0.3/test/newdir 注：添加完子目录后，一定要回到根目录更新一下，不然在该目录下提交文件会提示“提交失败” svn update 注：如果手工在checkout出来的目录里创建了一个新文件夹newsubdir， 再用svnmkdir newsubdir命令后，SVN会提示： svn:尝试用“svn add”或“svn add –non-recursive”代替？ svn:无法创建目录“hello”:文件已经存在 此时，用如下命令解决： svnadd –non-recursive newsubdir 在进入这个newsubdir文件夹，用ls-a查看它下面的全部目录与文件，会发现多了：.svn目录 再用svn mkdir -m “添hello功能模块文件”svn://192.168.0.3/test/newdir/newsubdir 命令， SVN提示： svn:File already exists: filesystem ‘/data/svnroot/test/db’, transaction’4541-1’, path’/newdir/newsubdir ‘ 恢复本地修改,恢复原始未改变的工作副本文件命令：svn revert svn revert [–recursive] 文件名 注意:本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录。 例子： svn revert foo.c ＜－丢弃对一个文件的修改 svn revert –recursive. ＜－恢复一整个目录的文件，.为当前目录 代码库URL变更,把工作拷贝更新到别的URL命令：svn switch或svnsw svn switch http://目录全路径 本地目录全路径 例子： svn switchhttp://192.163.0.3/test/456 . ＜－(原为123的分支)当前所在目录分支到192.163.0.3/test/456 svn switch (sw):更新工作副本至不同的URL. 用法:1、switchURL [PATH] 2、switch–relocate FROM TO [PATH…] 1、更新你的工作副本,映射到一个新的URL,其行为跟“svnupdate”很像,也会将 服务器上文件与本地文件合并.这是将工作副本对应到同一仓库中某个分支或者标记的 方法. 2、改写工作副本的URL元数据,以反映单纯的URL上的改变.当仓库的根URL变动 (比如方案名或是主机名称变动),但是工作副本仍旧对映到同一仓库的同一目录时使用 这个命令更新工作副本与仓库的对应关系. 解决冲突, 移除工作副本的目录或文件的“冲突”状态.命令：svn resolved svn resolved [本地目录全路径] 例子： $ svn update C foo.c Updated to revision 31. 如果你在更新时得到冲突，你的工作拷贝会产生三个新的文件： $ ls foo.c foo.c.mine foo.c.r30 foo.c.r31 当你解决了foo.c的冲突，并且准备提交，运行svnresolved让你的工作拷贝知道你已经完成了所有事情。 你可以仅仅删除冲突的文件并且提交，但是svnresolved除了删除冲突文件，还修正了一些记录在工作拷贝管理区域的记录数据，所以我们推荐你使用这个命令。 注意:本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的 相关文件,然后让PATH 可以再次提交. 19、不checkout而查看输出特定文件或URL的内容 命令：svn cat svn cat http://文件全路径 svn cat目标[@版本]…如果指定了版本,将从指定的版本开始查找. svn cat -r PREVfilename &gt; filename (PREV 是上一版本 例子： svn cathttp://192.168.0.3/test/readme.txt 参考：https://www.cnblogs.com/liuxiaowei/p/8297268.htmlhttps://lee2013.iteye.com/blog/1058047 END]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Ubuntu</category>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Ubuntu</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作常用命令(个人记载-持续补充)]]></title>
    <url>%2F2017%2F12%2F23%2FLinux%E6%93%8D%E4%BD%9C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E4%B8%AA%E4%BA%BA%E8%AE%B0%E8%BD%BD-%E6%8C%81%E7%BB%AD%E8%A1%A5%E5%85%85%2F</url>
    <content type="text"><![CDATA[前言Linux操作常用命令(个人记载-持续补充) 文件/文件夹管理ls 列出当前目录文件（不包括隐含文件）ls -a 列出当前目录文件（包括隐含文件）ls -l 列出当前目录下文件的详细信息 cd .. 回当前目录的上一级目录cd - 回上一次所在的目录cd ~ 或 cd 回当前用户的宿主目录touch 创建空文件echo 创建带有内容的文件cat 查看文件内容cp 拷贝 mkdir 目录名 创建一个目录rmdir 空目录名 删除一个空目录rm 文件名 文件名 删除一个文件或多个文件rm -rf 非空目录名 删除一个非空目录下的一切 mv 文件 /路径 移动文件到指定目录mv 文件名 新名称 在当前目录下改名find 路经 -name “字符串” 查找路经所在范围内满足字符串匹配的文件和目录wc 统计文本中行数、字数、字符数grep 在文本文件中查找某个字符串 vim使用vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。 命令模式下： :q 退出 :q! 强制退出 :wq 保存并退出 :set number 显示行号 :set nonumber 隐藏行号 /apache 在文档中查找apache 按n跳到下一个，shift+n上一个 yyp 复制光标所在行，并粘贴 h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→) 系统管理clear 清屏ifconfig 查看网络情况ping ip 测试网络连通netstat 显示网络状态信息netstat -ntl 查看端口使用情况nohup java -jar anyanghl.jar &amp; 执行程序并使其后台运行nohup java -jar anyanghl.jar &amp; &gt; test.txt 执行程序并使其后台运行输出日志到项目文件夹下的test.txt文件tail -f test.txt 查看后台执行日志 fdisk fdisk -l 查看系统分区信息fdisk fdisk /dev/sdb 为一块新的SCSI硬盘进行分区chown chown root /home 把/home的属主改成root用户chgrp chgrp root /home 把/home的属组改成root组 Useradd创建一个新的用户Groupadd 组名 创建一个新的组Passwd 用户名 为用户创建密码Passwd -d用户名 删除用户密码也能登陆Passwd -S用户名 查询账号密码Usermod -l 新用户名 老用户名 为用户改名Userdel–r 用户名 删除用户一切 stat 显示指定文件的详细信息，比ls更详细who 显示在线登陆用户whoami 显示当前操作用户hostname 显示主机名uname 显示系统信息which nginx 查询nginx所在目录 其他一样 uname -a 查看内核版本sudo fdisk -l 查看磁盘信息df -h 查看硬盘剩余空间free -m 查看当前的内存使用情况ps -ef 查看当前有哪些进程ps -ef | grep nginx 显示名为Nginx的进程kill 进程号 (就是ps -ef中的第一列的数字)或者 killall 进程名( 杀死一个进程)kill -9 进程号 强制杀死一个进程 reboot Init 6 重启LINUX系统Halt Init 0 Shutdown –h now 关闭LINUX系统 打包/解压tar -c 创建包 –x 释放包 -v 显示命令过程 –z 代表压缩包tar –cvf benet.tar /home/benet 把/home/benet目录打包tar –zcvf benet.tar.gz /mnt 把目录打包并压缩tar –zxvf benet.tar.gz 压缩包的文件解压恢复tar –jxvf benet.tar.bz2 解压缩 make编译make 编译make install 安装编译好的源码包 文件权限管理三种基本权限 R 读 数值表示为4 W 写 数值表示为2 X 可执行 数值表示为1 jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r—rw-rw-r–一共十个字符，分成四段第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录第二三四个字符“rw-”表示当前所属用户的权限。 所以用数值表示为4+2=6第五六七个字符“rw-”表示当前所属组的权限。 所以用数值表示为4+2=6第八九十个字符“r–”表示其他用户权限。 所以用数值表示为4所以操作此文件的权限用数值表示为664更改权限sudo chmod [u所属用户 g所属组 o其他用户 a所有用户] [+增加权限 -减少权限] [r w x] 目录名例如：有一个文件filename，权限为“-rw-r—-x” ,将权限值改为”-rwxrw-r-x”，用数值表示为765sudo chmod u+x g+w o+r filename上面的例子可以用数值表示sudo chmod 765 filename 关机/重启机器shutdown -r 关机重启 -h 关机不重启 now 立刻关机 halt 关机 reboot 重启 END]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Ubuntu</category>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下安装JDK及配置环境变量]]></title>
    <url>%2F2017%2F12%2F23%2FLinux%E4%B8%8B%E5%AE%89%E8%A3%85JDK%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[前言Linux下通过压缩包方式安装JDK以及配置环境变量。 1.oracle官网下载JDK点击跳转至JDK官方下载链接 2.解压文件tar -zxvf jdk-8u192-linux-x64.tar.gz 3.移动文件到指定目录目录自定义 这里选择/optsudo mv jdk1.8.0_192 /opt 4.配置环境变量1.打开配置文件sudo vim /etc/profile 2.在文件末尾添加以下代码12341 export JAVA_HOME=/opt/jdk1.8.0_1922 export JRE_HOME=$&#123;JAVA_HOME&#125;/jre3 export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib4 export PATH=.:$&#123;JAVA_HOME&#125;/bin:$PATH 4.使配置文件生效source /etc/profile 6.检查是否配置成功java -version出现对应版本号则配置成功 END]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Ubuntu</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Ubuntu</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下安装Nginx]]></title>
    <url>%2F2017%2F12%2F23%2FLinux%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%2F</url>
    <content type="text"><![CDATA[前言Nginx (“engine x”) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的,第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。 1.安装gcc g++的依赖库：Ubuntu使用以下命令：121.apt-get install build-essential2.apt-get install libtool CentOs使用以下命令：121.yum -y install gcc automake autoconf libtool make 2.yum install gcc gcc-c++ 2.安装 pcre依赖库1.sudo apt-get update 2.sudo apt-get install libpcre3 libpcre3-dev 3.安装 zlib依赖库apt-get install zlib1g-dev 4.安装 ssl依赖库apt-get install openssl 5.安装Nginx(1)下载最新版本：wget http://nginx.org/download/nginx-1.11.3.tar.gz(2)解压：tar -zxvf nginx-1.11.3.tar.gz(3)进入解压目录：cd nginx-1.11.3(4)配置：#这里的目录就是解压后的文件目录，具体看个人./configure --prefix=/usr/local/nginx()编辑nginx：make注意：这里可能会报错，提示“pcre.h No such file or directory”,具体详见：http://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory需要安装 libpcre3-dev,命令为：sudo apt-get install libpcre3-dev安装nginx：sudo make install启动nginx：sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过 -h查看帮助命令。查看nginx进程：ps -ef|grep nginx 6.Nginx常用命令进入Nginx目录cd /usr/local/nginx启动Nginx./sbin/nginx停止 Nginx./sbin/nginx -s stopNginx重新加载配置./sbin/nginx -s reload指定配置文件./sbin/nginx -c /usr/local/nginx/conf/nginx.conf查看 Nginx 版本./sbin/nginx -v检查配置文件是否正确./sbin/nginx -t END]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Ubuntu</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Ubuntu</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下安装Maven并配置环境变量]]></title>
    <url>%2F2017%2F12%2F16%2FLinux%E4%B8%8B%E5%AE%89%E8%A3%85Maven%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[前言在Ubuntu系统下通过压缩包方式安装Maven以及配置环境变量。 官网下载所需的版本压缩包官方下载直达链接 解压文件121.切换到文件存放的目录2.tar -zxvf apache-maven-3.5.2-bin.tar.gz 移动到/opt目录1sudo mv apache-maven-3.5.2 /opt 配置环境变量1234567891011//打开配置文件1.vim /etc/profile//新增行MAVEN_HOME,等于号后面是maven的文件夹地址2.export MAVEN_HOME=/opt/apache-maven-3.5.2 //找到PATH行,追加$MAVEN_HOME/bin3.PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH//刷新配置文件source /etc/profile 测试环境mvn -version出现版本号则正确配置 END]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
        <category>Ubuntu</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Ubuntu</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
</search>
